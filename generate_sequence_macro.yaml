AWSTemplateFormatVersion: 2010-09-09
Description: Create Macro Template
Resources:
    TransformExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                        Service: [lambda.amazonaws.com]
                      Action: ['sts:AssumeRole']
            Path: /
            Policies:
                - PolicyName: root
                  PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                        - Effect: Allow
                          Action: ['logs:*']
                          Resource: 'arn:aws:logs:*:*:*'
    TransformFunctionPermissions:
        Type: AWS::Lambda::Permission
        Properties:
            Action: 'lambda:InvokeFunction'
            FunctionName: !GetAtt TransformFunction.Arn
            Principal: 'cloudformation.amazonaws.com'
    TransformFunction:
        Type: AWS::Lambda::Function
        Properties:
            Code:
                ZipFile: |
                  import json

                  def handler(event, context):
                      print(event)
                      
                      try:
                          params = event["params"]
                          start = int( params.get("start", 0) )
                          stop = int( params.get("stop") )
                          identifier = params.get("identifier")

                          input_fragment = json.dumps( event["fragment"] )
                          print("Debug: ", input_fragment)

                          fragment = []
                          for i in range(start, stop):
                              output_frag = input_fragment.replace('${' + identifier + '}', str(i) )
                              print("Debug: ", output_frag)
                              
                              fragment.append( json.loads(output_frag) )

                          print("Output fragment: ", fragment)
                          return {
                              "requestId": event["requestId"],
                              "status": "success",
                              "fragment": fragment
                          }
                      except Exception as e:
                          response = {
                              "requestId": event["requestId"],
                              "status": "failure",
                              "fragment": event["fragment"],
                              "errorMessage": e.__str__()
                          }

                          return response

            Handler: index.handler
            Runtime: python3.11
            Timeout: '60'
            Role: !GetAtt TransformExecutionRole.Arn
    Transform:
        Type: AWS::CloudFormation::Macro
        Properties:
            Name: GenerateSequence
            Description: Macro to create Subnets for every available AZ
            FunctionName: !GetAtt TransformFunction.Arn

Outputs:
  GenerateSequenceMacro:
    Value: !Ref Transform
    Export:
      Name: GenerateSequenceMacro