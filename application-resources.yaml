AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS Cloudformation template to create network resources required for a 3-tier architecture."

Transform: AWS::LanguageExtensions

Parameters:
  VpcCidr:
    Type: "String"
    Default: 10.0.0.0/20
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IPv4 CIDR range of the form x.x.x.x/x."
  NumberOfAZs:
    Type: String
    AllowedPattern: "[2-3]"
    Default: 2 # This is because the ALB needs subnets in at least 2 AZs
  ServiceName:
    Type: String
    Default: testing

Mappings:
  NumberOfAZsToSubnetIdsMapper:
    SubnetIds:
      '2': ["0", "1"]
      '3': ["0", "1", "2"] 

Resources:
  NetworkResources:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcCidr: !Ref VpcCidr
        NumberOfAZs: !Ref NumberOfAZs
      Tags: 
        - Key: Service
          Value: !Ref ServiceName
      TemplateURL: 
        https://portfolio-cloudformation-templates.s3.amazonaws.com/network-template.yaml

  #GenerateSequenceStack:
  #  Type: AWS::CloudFormation::Stack
  #  Properties:
  #    Tags: 
  #      - Key: Service
  #        Value: !Ref ServiceName
  #    TemplateURL:
  #      https://portfolio-cloudformation-templates.s3.amazonaws.com/generate-sequence-macro.yaml

  ServiceALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub '${ServiceName}ALB'
      SecurityGroups: 
        - !GetAtt NetworkResources.Outputs.ALBSecurityGroup
      Subnets: 
        Fn::Transform:
          Name: GenerateSequence
          Parameters:
            identifier: Identifier
            start: 0
            stop: !Ref NumberOfAZs
        Fn::GetAtt:
          - NetworkResources
          - !Sub 'Outputs.PublicSubnets${Identifier}'
      Tags: 
        - Key: Application
          Value: !Ref ServiceName
      Type: application

  ServiceAlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: # Required
        - TargetGroupArn: !Ref ServiceTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ServiceALB # Required
      Port: 80
      Protocol: HTTP
      
  ServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      Name: !Sub '${ServiceName}-TargetGroup'
      Port: 80
      Protocol: HTTP
      Tags: 
        - Key: Service
          Value: !Ref ServiceName
      TargetType: instance
      Targets: 
        - Id: i-067ea5e18f0114f18
          Port: 80
        - Id: i-083a95ad3c77ebca9
          Port: 80
      VpcId: !GetAtt NetworkResources.Outputs.AppVpcId
