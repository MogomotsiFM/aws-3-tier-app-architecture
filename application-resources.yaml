AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS Cloudformation template to create resources required for a 3-tier architecture."

Transform: AWS::LanguageExtensions

Parameters:
  VpcCidr:
    Type: "String"
    Default: 10.0.0.0/20
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IPv4 CIDR range of the form x.x.x.x/x."
  NumberOfAZs:
    Type: String
    AllowedPattern: "[2-3]"
    Default: 2 # This is because the ALB needs subnets in at least 2 AZs
  ServiceName:
    Type: String
    Default: testing
  ALBPort:
    Type: Number
    Default: 80
    MinValue: 1
    MaxValue: 65535
  ServerPort:
    Type: Number
    Default: 8000 # FastAPI Python server listens on this port
    MinValue: 1
    MaxValue: 65535
  NetworkResourcesTemplate:
    Type: AWS::SSM::Parameter::Value<String>
    Description: > 
      The nested network resources template is stored in an S3 bucket. 
      The template URL is stored in SSM Parameter Store
    Default: /three-tier-arch/network-resources-template
  AutoScalingPolicy:
    Type: String
    Default: cpu
    AllowedValues: ["alb","cpu"]
  AutoScalingTarget:
    Type: Number
    Default: 55


Conditions:
  AvgCPUUtilization: !Equals 
    - cpu
    - !Ref AutoScalingPolicy


Resources:
  NetworkResources:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcCidr: !Ref VpcCidr
        NumberOfAZs: !Ref NumberOfAZs
        ALBPort: !Ref ALBPort
        ServerPort: !Ref ServerPort
        DatabasePort: 5432
        CreateNATGateway: "no"
      Tags: 
        - Key: Service
          Value: !Ref ServiceName
      TemplateURL: !Ref NetworkResourcesTemplate

  ServiceALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub '${ServiceName}ALB'
      SecurityGroups: 
        - !GetAtt NetworkResources.Outputs.ALBSecurityGroup
      Subnets: 
        Fn::Transform:
          Name: GenerateSequence
          Parameters:
            identifier: Identifier
            start: 0
            stop: !Ref NumberOfAZs
        Fn::GetAtt:
          - NetworkResources
          - !Sub 'Outputs.PublicSubnets${Identifier}'
      Tags: 
        - Key: Application
          Value: !Ref ServiceName
      Type: application

  ServiceAlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: # Required
        - TargetGroupArn: !Ref ServiceTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ServiceALB # Required
      Port: !Ref ALBPort
      Protocol: HTTP
      
  ServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPort: !Ref ServerPort
      HealthCheckPath: "/health"
      HealthCheckProtocol: HTTP
      Name: !Sub '${ServiceName}-TargetGroup'
      Port: !Ref ServerPort
      Protocol: HTTP
      Tags: 
        - Key: Service
          Value: !Ref ServiceName
      TargetType: instance
      VpcId: !GetAtt NetworkResources.Outputs.AppVpcId

  ServiceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        #IamInstanceProfile:
        #  Arn: "String"
        #  Name: "String"
        ImageId: 'ami-07b4f405aa6249ce9' # Custom AMI with the FastAPI test app.
        InstanceType: t2.micro
        SecurityGroupIds:
          - !GetAtt NetworkResources.Outputs.PrivateAccessSecurityGroup
        UserData: 
          Fn::Base64: |
            #!/bin/bash
            # Start the FastAPI Python server
            echo "Started FastAPI server..."
            gunicorn home.ec2-user.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind :8000 & disown #--user ec2-user
      LaunchTemplateName: !Sub '${ServiceName}-LaunchTemplate'

  ServiceASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${ServiceName}-ASG'
      DefaultInstanceWarmup: 0
      DesiredCapacity: 2
      HealthCheckGracePeriod: 5
      LaunchTemplate:
        LaunchTemplateId: !Ref ServiceLaunchTemplate
        Version: !GetAtt ServiceLaunchTemplate.LatestVersionNumber
      MaxSize: 6 # Required
      MinSize: 2 # Required
      TargetGroupARNs: 
        - !Ref ServiceTargetGroup
      VPCZoneIdentifier: 
        Fn::Transform:
          Name: GenerateSequence
          Parameters:
            identifier: Identifier
            start: 0
            stop: !Ref NumberOfAZs
        Fn::GetAtt:
          - NetworkResources
          - !Sub 'Outputs.PrivateSubnets${Identifier}'
  
  ServiceASGPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ServiceASG # Required
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        DisableScaleIn: false
        PredefinedMetricSpecification:
          PredefinedMetricType: 
            !If 
              - AvgCPUUtilization
              - ASGAverageCPUUtilization
              - ALBRequestCountPerTarget
          ResourceLabel: !If
            - AvgCPUUtilization
            - !Ref AWS::NoValue
            - !Join
              - '/'
              - - !GetAtt ServiceALB.LoadBalancerFullName
                - !GetAtt ServiceTargetGroup.TargetGroupFullName
        TargetValue: !Ref AutoScalingTarget

Outputs:
  ServiceAlbDNSName:
    Description: 'The DNS name of application load balancer of the service'
    Value: !Join
        - ''
        - - 'http://'
          - Fn::GetAtt: ServiceALB.DNSName
    Export:
      Name: !Sub '${ServiceName}-ALB-DNSName'
