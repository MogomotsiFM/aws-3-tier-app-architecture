AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS Cloudformation template to create network resources required for a 3-tier architecture."

Transform: AWS::LanguageExtensions

Parameters:
  VpcCidr:
    Type: "String"
    Default: 10.0.0.0/20
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IPv4 CIDR range of the form x.x.x.x/x."
  NumberOfAZs:
    Type: String
    AllowedPattern: "[1-3]"
    Default: 3
  ALBPort:
    Type: Number
    Default: 80
    MinValue: 1
    MaxValue: 65535
  ServerPort:
    Type: Number
    Default: 80
    MinValue: 1
    MaxValue: 65535
  DatabasePort:
    Type: Number
    Default: 80
    MinValue: 1
    MaxValue: 65535
  CreateNATGateway:
    Description: Do resources in private subnets require internet access?
    Type: String
    Default: "no"
    AllowedValues: ["yes","no"]


# Is there a way to generate these automatically?
Mappings:
  NumberOfAZsMapping:
    SubnetIDs:
      "1": ["0"]
      "2": ["0", "1"]
      "3": ["0", "1", "2"]
    ActualNumbers:
      "0": 0
      "1": 1
      "2": 2
      "3": 3


Conditions:
  IsNATGatewayRequired: !Equals
  - !Ref CreateNATGateway
  - "yes"


Resources:
  AppVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName

  Fn::ForEach::PublicSubnets:
  - Identifier
  - !FindInMap [NumberOfAZsMapping, SubnetIDs, !Ref NumberOfAZs]
  - 'PublicSubnet${Identifier}':
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select 
          - !FindInMap [NumberOfAZsMapping, ActualNumbers, !Ref Identifier]
          - Fn::GetAZs:
              Ref: AWS::Region
        CidrBlock:  
          Fn::Select:
            - !FindInMap [NumberOfAZsMapping, ActualNumbers, !Ref Identifier] 
            - Fn::Cidr:  
              - Fn::Select:
                - 0 
                - !Cidr [!GetAtt AppVPC.CidrBlock, 2, 11] # Split the VPC into two CIDRs
              - !FindInMap [NumberOfAZsMapping, ActualNumbers, !Ref NumberOfAZs]
              - 9
        VpcId: !Ref AppVPC
        Tags:
          - Key: StackName
            Value: !Ref AWS::StackName
          - Key: Name
            Value: !Sub PublicSubnet${Identifier}

  Fn::ForEach::PrivateSubnets:
  - Identifier
  - !FindInMap [NumberOfAZsMapping, SubnetIDs, !Ref NumberOfAZs]
  - 'PrivateSubnet${Identifier}':
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select 
          - !FindInMap [NumberOfAZsMapping, ActualNumbers, !Ref Identifier]
          - Fn::GetAZs:
             Ref: AWS::Region
        CidrBlock:
          Fn::Select:
            - !FindInMap [NumberOfAZsMapping, ActualNumbers, !Ref Identifier]
            - Fn::Cidr:  
              # Split the VPC CIDR into 5 parts: First 2 are private, next is unused, 4 is public, 5 is for data
              - Fn::Select:
                - 3
                - !Cidr [!GetAtt AppVPC.CidrBlock, 5, 9]
              - !FindInMap [NumberOfAZsMapping, ActualNumbers, !Ref NumberOfAZs]
              - 7
        VpcId: !Ref AppVPC
        Tags:
          - Key: StackName
            Value: !Ref AWS::StackName
          - Key: Name
            Value: !Sub PrivateSubnet${Identifier}

  Fn::ForEach::DataSubnets:
  - Identifier
  - !FindInMap [NumberOfAZsMapping, SubnetIDs, !Ref NumberOfAZs]
  - 'PrivateDataSubnet${Identifier}':
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select 
          - !FindInMap [NumberOfAZsMapping, ActualNumbers, !Ref Identifier]
          - Fn::GetAZs:
             Ref: AWS::Region
        CidrBlock:
          Fn::Select:
            - !FindInMap [NumberOfAZsMapping, ActualNumbers, !Ref Identifier]
            - Fn::Cidr:
              # Split the VPC CIDR into 5 parts: First 2 are private, next is unused, 4 is public, 5 is for data  
              - Fn::Select:
                - 4
                - !Cidr [!GetAtt AppVPC.CidrBlock, 5, 9] # Split the VPC into two CIDRs
              - !FindInMap [NumberOfAZsMapping, ActualNumbers, !Ref NumberOfAZs]
              - 7
        VpcId: !Ref AppVPC
        Tags:
          - Key: StackName
            Value: !Ref AWS::StackName
          - Key: Name
            Value: !Sub PrivateDataSubnet${Identifier}

  AlbSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: "0.0.0.0/0"
      Description: "Allows public http access from the internet"
      FromPort: !Ref ALBPort
      ToPort: !Ref ALBPort
      IpProtocol: "tcp" # Required
      GroupId: !Ref AlbSecurityGroup
    
  PrivateAccessSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allows http traffic from the ALB"
      FromPort: !Ref ServerPort
      ToPort: !Ref ServerPort
      GroupId: !Ref PrivateAccessSecurityGroup
      IpProtocol: "tcp" # Required
      SourceSecurityGroupId: !Ref AlbSecurityGroup

  DataAccessSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allows traffic from the servers into the DB instances"
      FromPort: !Ref DatabasePort
      ToPort: !Ref DatabasePort
      GroupId: !Ref DataAccessSecurityGroup
      IpProtocol: "tcp" # Required
      SourceSecurityGroupId: !Ref PrivateAccessSecurityGroup

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for the Application Load Balancer" # Required
      GroupName: "ALB_SG"
      VpcId: !Ref AppVPC
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: Name
          Value: PublicAccessSecurityGroup

  PrivateAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allows http traffic from the ALB" # Required
      GroupName: "Private Subnet SG"
      VpcId: !Ref AppVPC
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: Name
          Value: PrivateAccessSecurityGroup

  DataAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allows traffic from the server into the DB instances" # Required
      GroupName: "Private-Data-Subnet-SG"
      VpcId: !Ref AppVPC
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: Name
          Value: DataAccessSecurityGroup

  AppInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
  
  AppVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref AppInternetGateway
      VpcId: !Ref AppVPC # Required

  # A NAT Gateway requires an elastic IP
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: IsNATGatewayRequired
    Properties:
      Domain: vpc
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName

  AppNatGateway:
    Type: AWS::EC2::NatGateway
    Condition: IsNATGatewayRequired
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet0 # Required
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName

  AppPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AppVPC # Required
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName

  AppRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref AppInternetGateway
      RouteTableId: !Ref AppPublicRouteTable # Required

  AppPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AppVPC # Required
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName

  RouteNatGateway:
    Type: AWS::EC2::Route
    Condition: IsNATGatewayRequired
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref AppNatGateway
      RouteTableId: !Ref AppPrivateRouteTable # Required

  # Associate the private subnet with their Route Table
  'Fn::ForEach::PrivateSubnetRouteAssociation':
  - Identifier
  - !FindInMap [NumberOfAZsMapping, SubnetIDs, !Ref NumberOfAZs]
  - 'PrivateSubnetRouteAssociation${Identifier}':
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref AppPrivateRouteTable # Required
        SubnetId: !Ref 
          Fn::Sub: 'PrivateSubnet${Identifier}' # Required

  # Associate the private data subnet with their Route Table
  'Fn::ForEach::DataSubnetRouteAssociation':
  - Identifier
  - !FindInMap [NumberOfAZsMapping, SubnetIDs, !Ref NumberOfAZs]
  - 'DataSubnetRouteAssociation${Identifier}':
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref AppPrivateRouteTable # Required
        SubnetId: !Ref 
          Fn::Sub: 'PrivateDataSubnet${Identifier}' # Required

  # Associate the public subnet with their Route Table
  'Fn::ForEach::PublicSubnetRouteAssociation':
  - Identifier
  - !FindInMap [NumberOfAZsMapping, SubnetIDs, !Ref NumberOfAZs]
  - 'PublicSubnetRouteAssociation${Identifier}':
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref AppPublicRouteTable # Required
        SubnetId: !Ref 
          Fn::Sub: 'PublicSubnet${Identifier}' # Required

Outputs:
  AppVpcId:
    Value: !Ref AppVPC
    Export:
      Name: AppVpc

  Fn::ForEach::ExportedPublicSubnets:
  - Identifier
  - !FindInMap [NumberOfAZsMapping, SubnetIDs, !Ref NumberOfAZs]
  - 'PublicSubnets${Identifier}':
      Value: !Ref
        Fn::Sub: 'PublicSubnet${Identifier}'
      Export:
        Name: !Sub 'PublicSubnet${Identifier}'

  Fn::ForEach::ExportedPrivateSubnets:
  - Identifier
  - !FindInMap [NumberOfAZsMapping, SubnetIDs, !Ref NumberOfAZs]
  - 'PrivateSubnets${Identifier}':
      Value: !Ref
        Fn::Sub: 'PrivateSubnet${Identifier}'
      Export: 
        Name: !Sub 'PrivateSubnet${Identifier}'

  Fn::ForEach::ExportedDataSubnets:
  - Identifier
  - !FindInMap [NumberOfAZsMapping, SubnetIDs, !Ref NumberOfAZs]
  - 'DataSubnets${Identifier}':
      Value: !Ref
        Fn::Sub: 'PrivateDataSubnet${Identifier}'
      Export: 
        Name: !Sub 'PrivateDataSubnet${Identifier}'

  ALBSecurityGroup:
    Description: This security group would typically be used for an ALB
    Value: !Ref AlbSecurityGroup
    Export: 
        Name: ALBSecurityGroup

  PrivateAccessSecurityGroup:
    Description: ENIs associated with this security group can only be 
      accessed by resources associated with the exported AlbSecurityGroup
    Value: !Ref PrivateAccessSecurityGroup
    Export: 
        Name: PrivateAccessSecurityGroup

  PrivateDataAccessSecurityGroup:
    Description: ENIs associated with this security group can only be 
      accessed by resources associated with the exported AlbSecurityGroup
    Value: !Ref DataAccessSecurityGroup
    Export: 
        Name: PrivateDataAccessSecurityGroup
