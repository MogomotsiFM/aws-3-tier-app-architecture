AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS Cloudformation template to create network resources required for a 3-tier architecture."

Transform: AWS::LanguageExtensions

Parameters:
  VpcCidr:
    Type: "String"
    Default: 10.0.0.0/20
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IPv4 CIDR range of the form x.x.x.x/x."
  NumberOfAZs:
    Type: Number
    #AllowedPattern: "[1-3]"
    MinValue: 1
    MaxValue: 3
    Default: 1

Mappings:
  SubnetTypeToIdxMapper:
    A:
      "Public": "0"
      "Private": "1"


    #- Fn::Transform:
    #    Name: GenerateSequence
    #    Parameters:
    #      stop: !Ref NumberOfAZs


Resources:
  AppVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName

  'Fn::ForEach::SubnetTypes':
  - SubnetType
  - [Public, Private]
  - 'App${SubnetType}RouteTable':
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref AppVPC # Required
        Tags:
          - Key: StackName
            Value: !Ref AWS::StackName
    'Fn::ForEach::SubnetId':
    - SubnetIdx
    - ["0", "1"] #, "1", "2"]
    - '${SubnetType}Subnet${SubnetIdx}':
        Type: AWS::EC2::Subnet
        Properties:
          AvailabilityZone: !Select 
            - !Ref SubnetIdx
            - !GetAZs 'us-east-1'
          CidrBlock:  
            Fn::Select:
              - !Ref SubnetIdx
              - Fn::Cidr:  
                - Fn::Select:
                  - !FindInMap [SubnetTypeToIdxMapper, A, !Ref SubnetType]  
                  - !Cidr [!GetAtt AppVPC.CidrBlock, 2, 10] # Split the VPC into two CIDRs
                - !Ref NumberOfAZs
                - 8
          VpcId: !Ref AppVPC
          Tags:
            - Key: StackName
              Value: !Ref AWS::StackName
            - Key: Name
              Value: 
                Fn::Sub: '${SubnetType}Subnet${SubnetIdx}'

  AlbSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: "0.0.0.0/0"
      Description: "Allows public http access from the internet"
      FromPort: 80
      ToPort: 80
      IpProtocol: "tcp" # Required
      GroupId: !Ref AlbSecurityGroup
      
  PrivateSubnetSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allows http traffic from the ALB"
      FromPort: 80
      ToPort: 80
      GroupId: !Ref PrivateSubnetSecurityGroup
      IpProtocol: "tcp" # Required
      SourceSecurityGroupId: !Ref AlbSecurityGroup

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for the Application Load Balancer" # Required
      GroupName: "ALB_SG"
      VpcId: !Ref AppVPC
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: Name
          Value: !Sub PublicAccessSecurityGroup

  PrivateSubnetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allows http traffic from the ALB" # Required
      GroupName: "Private Subnet SG"
      VpcId: !Ref AppVPC
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: Name
          Value: !Sub PrivateAccessSecurityGroup

  AppInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
  
  AppVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref AppInternetGateway
      VpcId: !Ref AppVPC # Required

  # A NAT Gateway requires an elastic IP
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName

  AppNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet0 # Required
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName

#  AppPublicRouteTable:
#    Type: AWS::EC2::RouteTable
#    Properties:
#      VpcId: !Ref AppVPC # Required
#      Tags:
#        - Key: StackName
#          Value: !Ref AWS::StackName

  AppRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref AppInternetGateway
      RouteTableId: !Ref AppPublicRouteTable # Required

  #AppPrivateRouteTable:
  #  Type: AWS::EC2::RouteTable
  #  Properties:
  #    VpcId: !Ref AppVPC # Required
  #    Tags:
  #      - Key: StackName
  #        Value: !Ref AWS::StackName

  RouteNatGateway:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref AppNatGateway
      RouteTableId: !Ref AppPrivateRouteTable # Required


Outputs:
  AppVpcId:
    Value: !Ref AppVPC
    Export:
      Name: AppVpc

#  Fn::Transform:
#    Name: GenerateSequence
#    Parameters:
#      identifier: Identifier
#      start: 0  # Optional
#      stop: !Ref NumberOfAZs
#  PrivateSubnet${Identifier}:
#    Value: !Ref
#      Fn::Sub: 'PrivateSubnet${Identifier}'
#    Export: 
#      Name: !Sub 'PrivateSubnet${Identifier}'    
#  PublicSubnet${Identifier}:
#    Value: !Ref
#      Fn::Sub: 'PublicSubnet${Identifier}'
#    Export:
#      Name: !Sub 'PublicSubnet${Identifier}'

  ALBSecurityGroup:
    Description: This security group would typically be used for an ALB
    Value: !Ref AlbSecurityGroup
    Export: 
        Name: ALBSecurityGroup

  PrivateAccessSecurityGroup:
    Description: ENIs associated with this security group can only be 
      accessed by resources associated with the exported AlbSecurityGroup
    Value: !Ref PrivateSubnetSecurityGroup
    Export: 
        Name: PrivateAccessSecurityGroup