AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS Cloudformation template to create network resources required for a 3-tier architecture."

Transform: AWS::LanguageExtensions

Parameters:
  VpcCidr:
    Type: "String"
    Default: 10.0.0.0/20
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IPv4 CIDR range of the form x.x.x.x/x."
  NumberOfAZs:
    Type: String
    AllowedPattern: "[1-3]"
    Default: 1
    
# Is there a way to generate these automatically?
Mappings:
  NumberOfAZsMapping:
    SubnetIDs:
      "1": ["0"]
      "2": ["0", "1"]
      "3": ["0", "1", "2"]
    ActualNumbers:
      "0": 0
      "1": 1
      "2": 2
      "3": 3

Resources:
  AppVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr

  Fn::ForEach::PublicSubnets:
  - Identifier
  - !FindInMap [NumberOfAZsMapping, SubnetIDs, !Ref NumberOfAZs]
  - 'PublicSubnet${Identifier}':
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select 
          - !FindInMap [NumberOfAZsMapping, ActualNumbers, !Ref Identifier]
          - !GetAZs 'us-east-1'
        CidrBlock:  
          Fn::Select:
            - !FindInMap [NumberOfAZsMapping, ActualNumbers, !Ref Identifier] 
            - Fn::Cidr:  
              - Fn::Select:
                - 0 
                - !Cidr [!GetAtt AppVPC.CidrBlock, 2, 10] # Split the VPC into two CIDRs
              - !FindInMap [NumberOfAZsMapping, ActualNumbers, !Ref NumberOfAZs]
              - 8
        VpcId: !Ref AppVPC

  Fn::ForEach::PrivateSubnets:
  - Identifier
  - !FindInMap [NumberOfAZsMapping, SubnetIDs, !Ref NumberOfAZs]
  - 'PrivateSubnet${Identifier}':
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select 
          - !FindInMap [NumberOfAZsMapping, ActualNumbers, !Ref Identifier]
          - !GetAZs 'us-east-1'
        CidrBlock:  
          Fn::Select:
            - !FindInMap [NumberOfAZsMapping, ActualNumbers, !Ref Identifier]
            - Fn::Cidr:  
              - Fn::Select:
                - 1 
                - !Cidr [!GetAtt AppVPC.CidrBlock, 2, 10] # Split the VPC into two CIDRs
              - !FindInMap [NumberOfAZsMapping, ActualNumbers, !Ref NumberOfAZs]
              - 8
        VpcId: !Ref AppVPC

  AlbSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: "0.0.0.0/0"
      Description: "Allows public http access from the internet"
      FromPort: 80
      ToPort: 80
      IpProtocol: "tcp" # Required
      GroupId: !Ref AlbSecurityGroup
    
  PrivateSubnetSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allows http traffic from the ALB"
      FromPort: 80
      ToPort: 80
      GroupId: !Ref PrivateSubnetSecurityGroup
      IpProtocol: "tcp" # Required
      SourceSecurityGroupId: !Ref AlbSecurityGroup

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for the Application Load Balancer" # Required
      GroupName: "ALB_SG"
      VpcId: !Ref AppVPC

  PrivateSubnetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allows http traffic from the ALB" # Required
      GroupName: "Private Subnet SG"
      VpcId: !Ref AppVPC

  AppInternetGateway:
    Type: AWS::EC2::InternetGateway
  
  AppVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref AppInternetGateway
      VpcId: !Ref AppVPC # Required

  # A NAT Gateway requires an elastic IP
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  AppNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet0 # Required

  AppPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AppVPC # Required

  AppRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref AppInternetGateway
      RouteTableId: !Ref AppPublicRouteTable # Required

  AppPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AppVPC # Required

  RouteNatGateway:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref AppNatGateway
      RouteTableId: !Ref AppPrivateRouteTable # Required

  # Associate the private subnet with their Route Table
  'Fn::ForEach::PrivateSubnetRouteAssociation':
  - Identifier
  - !FindInMap [NumberOfAZsMapping, SubnetIDs, !Ref NumberOfAZs]
  - 'PrivateSubnetRouteAssociation${Identifier}':
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref AppPrivateRouteTable # Required
        SubnetId: !Ref 
          Fn::Sub: 'PrivateSubnet${Identifier}' # Required

  # Associate the public subnet with their Route Table
  'Fn::ForEach::PublicSubnetRouteAssociation':
  - Identifier
  - !FindInMap [NumberOfAZsMapping, SubnetIDs, !Ref NumberOfAZs]
  - 'PublicSubnetRouteAssociation${Identifier}':
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref AppPublicRouteTable # Required
        SubnetId: !Ref 
          Fn::Sub: 'PublicSubnet${Identifier}' # Required

